# name: Security Scans
# on:
#   push:
#     branches: [ main, master ]
#   pull_request:
#     branches: [ main, master ]
#   workflow_dispatch:

# jobs:
#   semgrep:
#     name: Semgrep
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: semgrep/semgrep-action@v1
#         with:
#           config: auto
#         continue-on-error: true

#   gitleaks:
#     name: Gitleaks
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#       - uses: gitleaks/gitleaks-action@v2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         continue-on-error: true
name: Security Scans
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  semgrep:
    name: Semgrep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: semgrep/semgrep-action@v1
        with:
          config: auto
        continue-on-error: true
      - name: Find Semgrep results
        run: |
          echo "Listing files to find Semgrep results:"
          find . -name "*.json" | grep -i semgrep || echo "No Semgrep results found"
      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: |
            ./**/*semgrep*.json
            .semgrep/*.json
        continue-on-error: true

  gitleaks:
    name: Gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      - name: Find Gitleaks results
        run: |
          echo "Listing files to find Gitleaks results:"
          find . -name "*.json" | grep -i leak || echo "No Gitleaks results found"
      - name: Upload Gitleaks results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gitleaks-results
          path: |
            ./**/*leak*.json
        continue-on-error: true

  sbom-vulnerability-scan:
    name: SBOM & Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Run Syft (SBOM)
        uses: anchore/sbom-action@v0
        with:
          format: json
          output-file: syft-sbom.json
        continue-on-error: true
          
      - name: Generate SPDX SBOM
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: syft-spdx.json
        continue-on-error: true
          
      - name: Run Grype (Vulnerabilities)
        uses: anchore/scan-action@v3
        id: scan
        with:
          sbom: syft-sbom.json
          output-format: json
        continue-on-error: true
          
      - name: Find SBOM & Vulnerability results
        run: |
          echo "Listing files to find SBOM & Vulnerability results:"
          find . -name "*.json" | grep -E 'syft|grype' || echo "No SBOM or Vulnerability results found"
          
      - name: Upload SBOM & Vulnerability results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sbom-vulnerability-results
          path: |
            ./**/*syft*.json
            ./**/*grype*.json
        continue-on-error: true

  python-security-scans:
    name: Python Security Scans
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install bandit pip-audit
        continue-on-error: true
          
      - name: Run Bandit
        run: |
          bandit -r . -f json -o bandit-results.json || true
          
      - name: Run pip-audit
        run: |
          pip-audit --format json > pip-audit-results.json || true
          
      - name: Find Python security results
        run: |
          echo "Listing files to find Python security results:"
          find . -name "*.json" | grep -E 'bandit|pip-audit' || echo "No Python security results found"
          
      - name: Upload Python security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-security-results
          path: |
            ./**/*bandit*.json
            ./**/*pip-audit*.json
        continue-on-error: true

  upload-to-defectdojo:
    name: Upload to DefectDojo
    needs: [semgrep, gitleaks, sbom-vulnerability-scan, python-security-scans]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: List downloaded artifacts
        run: |
          echo "Listing downloaded artifacts:"
          find . -type f -name "*.json" | sort
          
      - name: Upload to DefectDojo
        run: |
          upload_to_defectdojo() {
            local file=$1
            local scan_type=$2
            local description=$3
            
            if [ ! -f "$file" ]; then
              echo "$file not found, skipping upload"
              return 1
            fi
            
            echo "Uploading $description to DefectDojo..."
            RESULT=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
              -F "scan_date=$(date +%Y-%m-%d)" \
              -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
              -F "file=@$file" \
              -F "scan_type=$scan_type" \
              -F "close_old_findings=true" \
              ${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/)
            
            STATUS_CODE=$(echo "$RESULT" | tail -n1)
            CONTENT=$(echo "$RESULT" | sed '$d')
            
            echo "$description upload status: $STATUS_CODE"
            echo "Response: $CONTENT"
            echo "## $description Upload" >> $GITHUB_STEP_SUMMARY
            echo "- Status code: $STATUS_CODE" >> $GITHUB_STEP_SUMMARY
            if [ "$STATUS_CODE" == "201" ]; then
              echo "- Result: Success ✅" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Result: Failed ❌" >> $GITHUB_STEP_SUMMARY
              echo "- Error: $CONTENT" >> $GITHUB_STEP_SUMMARY
            fi
          }
          
          # Zoek en upload semgrep resultaten
          semgrep_file=$(find . -name "*semgrep*.json" | head -1)
          if [ -n "$semgrep_file" ]; then
            upload_to_defectdojo "$semgrep_file" "Semgrep JSON Report" "Semgrep"
          else
            echo "No Semgrep results found to upload"
          fi
          
          # Zoek en upload gitleaks resultaten
          gitleaks_file=$(find . -name "*leak*.json" | head -1)
          if [ -n "$gitleaks_file" ]; then
            upload_to_defectdojo "$gitleaks_file" "Gitleaks Scan" "Gitleaks"
          else
            echo "No Gitleaks results found to upload"
          fi
          
          # Zoek en upload syft resultaten
          syft_file=$(find . -name "*syft*.json" | head -1)
          if [ -n "$syft_file" ]; then
            upload_to_defectdojo "$syft_file" "Anchore Engine Scan" "Syft SBOM"
          else
            echo "No Syft results found to upload"
          fi
          
          # Zoek en upload grype resultaten
          grype_file=$(find . -name "*grype*.json" | head -1)
          if [ -n "$grype_file" ]; then
            upload_to_defectdojo "$grype_file" "Anchore Grype" "Grype Vulnerabilities"
          else
            echo "No Grype results found to upload"
          fi
          
          # Zoek en upload bandit resultaten
          bandit_file=$(find . -name "*bandit*.json" | head -1)
          if [ -n "$bandit_file" ]; then
            upload_to_defectdojo "$bandit_file" "Bandit Scan" "Bandit"
          else
            echo "No Bandit results found to upload"
          fi
          
          # Zoek en upload pip-audit resultaten
          pip_audit_file=$(find . -name "*pip-audit*.json" | head -1)
          if [ -n "$pip_audit_file" ]; then
            upload_to_defectdojo "$pip_audit_file" "Generic Findings Import" "pip-audit"
          else
            echo "No pip-audit results found to upload"
          fi
        continue-on-error: true