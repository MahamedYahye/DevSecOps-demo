name: Security Scan and Publish
on:
  workflow_run:
    workflows: ["Build and Version Docker Image"]
    types:
      - completed
    branches: [main]

jobs:
  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-docker-image.yml
          name: docker-image
          path: image-artifact
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_conclusion: success
          
      - name: Load Docker image
        run: |
          docker load < image-artifact/flask-app.tar
          IMAGE_TAG=$(cat image-artifact/version.txt)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Generate SBOM with Syft
        run: |
          mkdir -p scan-results
          
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          syft flask-app:${{ env.IMAGE_TAG }} -o cyclonedx-json=scan-results/sbom.cyclonedx.json -o spdx-json=scan-results/sbom.spdx.json

          echo "SBOM generated successfully"
          echo "Package Summary:"
          syft flask-app:${{ env.IMAGE_TAG }} -o table | head -n 20

      - name: Scan image with Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          
          grype flask-app:${{ env.IMAGE_TAG }} -o json > scan-results/grype-vulnerabilities.json

          echo "Vulnerability Summary:"
          CRITICAL_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "Critical")) | length' scan-results/grype-vulnerabilities.json)
          HIGH_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "High")) | length' scan-results/grype-vulnerabilities.json)

          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"

          echo "Top Critical/High Vulnerabilities:"
          jq -r '.matches | map(select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High")) | .[0:10] | .[] | "\(.vulnerability.severity): \(.vulnerability.id) in \(.artifact.name) v\(.artifact.version)"' scan-results/grype-vulnerabilities.json || echo "No critical/high vulnerabilities found"
          
          echo "CRITICAL_COUNT=$CRITICAL_COUNT" >> $GITHUB_ENV
          echo "HIGH_COUNT=$HIGH_COUNT" >> $GITHUB_ENV

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: scan-results/
          if-no-files-found: warn

      - name: Check for critical vulnerabilities
        id: vulnerability_check
        run: |
          if [ "${{ env.CRITICAL_COUNT }}" -gt 0 ]; then
            echo "WARNING: ${{ env.CRITICAL_COUNT }} critical vulnerabilities found in the Docker image"
            echo "has_critical_vulnerabilities=true" >> $GITHUB_OUTPUT
            echo "For production deployments, consider failing the build here (uncomment line below)"
            # exit 1
          else
            echo "No critical vulnerabilities found in the Docker image"
            echo "has_critical_vulnerabilities=false" >> $GITHUB_OUTPUT
          fi

  publish_image:
    name: Publish to Registry
    needs: security_scan
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker image artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-docker-image.yml
          name: docker-image
          path: image-artifact
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_conclusion: success
      
      - name: Load Docker image
        run: |
          docker load < image-artifact/flask-app.tar
          IMAGE_TAG=$(cat image-artifact/version.txt)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and Push Image
        run: |
          docker tag flask-app:${{ env.IMAGE_TAG }} ghcr.io/${{ github.repository_owner }}/flask-app:${{ env.IMAGE_TAG }}
          docker tag flask-app:${{ env.IMAGE_TAG }} ghcr.io/${{ github.repository_owner }}/flask-app:latest
          
          docker push ghcr.io/${{ github.repository_owner }}/flask-app:${{ env.IMAGE_TAG }}
          docker push ghcr.io/${{ github.repository_owner }}/flask-app:latest
          
          echo "Successfully pushed image to GitHub Container Registry"

      - name: Checkout code for tagging
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Git Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v${{ env.IMAGE_TAG }}" -m "Release v${{ env.IMAGE_TAG }}"
          git push origin "v${{ env.IMAGE_TAG }}"