name: Build, Scan and Push
on:
  workflow_dispatch:  # Handmatig triggeren
  push:
    branches: [main]  # Bij pushes naar main branch

jobs:
  build_scan_push:
    name: Build, Scan and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: flask-app:${{ github.sha }}
          push: false

      - name: Install Syft and Generate SBOM
        run: |
          mkdir -p scan-results
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          syft flask-app:${{ github.sha }} -o cyclonedx-json=scan-results/sbom.cyclonedx.json -o spdx-json=scan-results/sbom.spdx.json
          
          echo "Package Summary:"
          syft flask-app:${{ github.sha }} -o table | head -n 20

      - name: Install Grype and Scan for Vulnerabilities
        id: vulnerability_scan
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          
          grype flask-app:${{ github.sha }} -o json > scan-results/grype-vulnerabilities.json
          
          echo "Vulnerability Summary:"
          CRITICAL_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "Critical")) | length' scan-results/grype-vulnerabilities.json)
          HIGH_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "High")) | length' scan-results/grype-vulnerabilities.json)
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          # Store the count for later steps
          echo "critical_vulnerabilities=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_vulnerabilities=$HIGH_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "WARNING: $CRITICAL_COUNT critical vulnerabilities found"
            echo "Top Critical Vulnerabilities:"
            jq -r '.matches | map(select(.vulnerability.severity == "Critical")) | .[0:5] | .[] | "\(.vulnerability.id) in \(.artifact.name) v\(.artifact.version)"' scan-results/grype-vulnerabilities.json
          fi

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ github.sha }}
          path: scan-results/
          retention-days: 30

      - name: Security Gate
        id: security_gate
        run: |
          CRITICAL_COUNT=${{ steps.vulnerability_scan.outputs.critical_vulnerabilities }}
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "FAILED: $CRITICAL_COUNT critical vulnerabilities found"
            echo "⛔ Security gate failed - pushing of image aborted"
            exit 1
          else
            echo "✅ Security gate passed - proceeding to push image"
          fi

      - name: Login to Azure Container Registry
        if: success()
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Tag and Push Docker image
        if: success()
        run: |
          # Tag voor ACR
          docker tag flask-app:${{ github.sha }} ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:latest
          docker tag flask-app:${{ github.sha }} ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:${{ github.sha }}
          
          # Push naar ACR
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:${{ github.sha }}
          
          echo "Successfully pushed secure image to Azure Container Registry"