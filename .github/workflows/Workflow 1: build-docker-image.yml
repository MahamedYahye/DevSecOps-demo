# name: Build, Scan and Push

# on:
#   workflow_dispatch:  # Handmatig triggeren
#   push:
#     branches: [main]  # Bij pushes naar main branch

# jobs:
#   build_scan_push:
#     name: Build, Scan and Push Docker Image
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Build Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           load: true
#           tags: flask-app:${{ github.sha }}
#           push: false

#       - name: Install Syft and Generate SBOM
#         run: |
#           mkdir -p scan-results
#           curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
#           syft flask-app:${{ github.sha }} -o cyclonedx-json=scan-results/sbom.cyclonedx.json -o spdx-json=scan-results/sbom.spdx.json
#           echo "Package Summary:"
#           syft flask-app:${{ github.sha }} -o table | head -n 20

#       - name: Install Grype and Scan for Vulnerabilities
#         id: vulnerability_scan
#         run: |
#           curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
#           grype flask-app:${{ github.sha }} -o json > scan-results/grype-vulnerabilities.json
#           echo "Vulnerability Summary:"
#           CRITICAL_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "Critical")) | length' scan-results/grype-vulnerabilities.json)
#           HIGH_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "High")) | length' scan-results/grype-vulnerabilities.json)
#           echo "Critical vulnerabilities: $CRITICAL_COUNT"
#           echo "High vulnerabilities: $HIGH_COUNT"
#           echo "critical_vulnerabilities=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
#           echo "high_vulnerabilities=$HIGH_COUNT" >> $GITHUB_OUTPUT
#           if [ "$CRITICAL_COUNT" -gt 0 ]; then
#             echo "WARNING: $CRITICAL_COUNT critical vulnerabilities found"
#             echo "Top Critical Vulnerabilities:"
#             jq -r '.matches | map(select(.vulnerability.severity == "Critical")) | .[0:5] | .[] | "\(.vulnerability.id) in \(.artifact.name) v\(.artifact.version)"' scan-results/grype-vulnerabilities.json
#           fi

#       - name: Upload scan results
#         uses: actions/upload-artifact@v4
#         with:
#           name: scan-results-${{ github.sha }}
#           path: scan-results/
#           retention-days: 30

#       - name: Security Gate
#         id: security_gate
#         run: |
#           CRITICAL_COUNT=${{ steps.vulnerability_scan.outputs.critical_vulnerabilities }}
#           if [ "$CRITICAL_COUNT" -gt 0 ]; then
#             echo "FAILED: $CRITICAL_COUNT critical vulnerabilities found"
#             echo "⛔ Security gate failed - pushing of image aborted"
#             exit 1
#           else
#             echo "✅ Security gate passed - proceeding to push image"
#           fi

#       - name: Login to Azure Container Registry
#         if: success()
#         uses: azure/docker-login@v1
#         with:
#           login-server: ${{ secrets.ACR_LOGIN_SERVER }}
#           username: ${{ secrets.ACR_USERNAME }}
#           password: ${{ secrets.ACR_PASSWORD }}

#       - name: Tag and Push Docker image
#         if: success()
#         run: |
#           docker tag flask-app:${{ github.sha }} ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:latest
#           docker tag flask-app:${{ github.sha }} ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:${{ github.sha }}
#           docker push ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:latest
#           docker push ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:${{ github.sha }}
#           echo "Successfully pushed secure image to Azure Container Registry"

#   upload_security_results:
#     name: Upload Security Results to Security Tools
#     needs: build_scan_push
#     runs-on: ubuntu-latest
#     steps:
#       - name: Download Scan Results
#         uses: actions/download-artifact@v4
#         with:
#           name: scan-results-${{ github.sha }}
#           path: scan-results

#       - name: Upload Grype to DefectDojo
#         env:
#           DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
#           DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
#           DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
#         run: |
#           echo "⌛ Uploading Grype scan"
#           curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
#             -H "Authorization: Token $DEFECTDOJO_API_KEY" \
#             -F "scan_date=$(date +%Y-%m-%d)" \
#             -F "scan_type=Anchore Grype" \
#             -F "close_old_findings=true" \
#             -F "deduplication_on_engagement=true" \
#             -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
#             -F "file=@scan-results/grype-vulnerabilities.json"
#           echo "✅ Grype scan uploaded"

#       - name: Upload SBOM to Dependency-Track
#         env:
#           DT_URL: ${{ secrets.DEPENDENCYTRACK_URL }}
#           DT_API_KEY: ${{ secrets.DEPENDENCYTRACK_API_KEY }}
#           PROJECT_UUID: ${{ secrets.DEPENDENCYTRACK_PROJECT_UUID }}
#         run: |
#           echo "⌛ Uploading SBOM to Dependency-Track"
#           curl -X POST "$DT_URL/api/v1/bom" \
#             -H "X-API-Key: $DT_API_KEY" \
#             -H "Content-Type: multipart/form-data" \
#             -F "project=$PROJECT_UUID" \
#             -F "bom=@scan-results/sbom.cyclonedx.json"
#           echo "✅ SBOM uploaded to Dependency-Track"
# 
name: Build, Scan and Push

on:
  workflow_dispatch:  # Alleen handmatig triggeren
  workflow_run:
    workflows: ["Modular SAST Workflow"]
    types:
      - completed
    branches: [main]

jobs:
  build_scan_push:
    name: Build, Scan and Push Docker Image
    # Alleen uitvoeren als de SAST workflow slaagt
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Volledige geschiedenis ophalen voor versioning

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Determine SemVer
        id: semver
        run: |
          # Kijk of er git tags zijn die voldoen aan SemVer patroon
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "v0.1.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Strip de 'v' prefix voor Docker image
          VERSION=${LATEST_TAG#v}
          
          # Controleer of dit een nieuwe commit is sinds de laatste tag
          if git describe --exact-match --tags HEAD 2>/dev/null; then
            # We zijn precies op een tag
            echo "Using exact tag version: $VERSION"
          else
            # We zijn na een tag, voeg commits en hash toe aan de versie
            COMMIT_COUNT=$(git rev-list ${LATEST_TAG}..HEAD --count)
            SHORT_SHA=$(git rev-parse --short HEAD)
            VERSION="${VERSION}-dev.${COMMIT_COUNT}+${SHORT_SHA}"
            echo "Generated dev version: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION for Docker image"

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: flask-app:${{ github.sha }}
          push: false

      - name: Install Syft and Generate SBOM
        run: |
          mkdir -p scan-results
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft flask-app:${{ github.sha }} -o cyclonedx-json=scan-results/sbom.cyclonedx.json -o spdx-json=scan-results/sbom.spdx.json
          echo "Package Summary:"
          syft flask-app:${{ github.sha }} -o table | head -n 20

      - name: Install Grype and Scan for Vulnerabilities
        id: vulnerability_scan
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype flask-app:${{ github.sha }} -o json > scan-results/grype-vulnerabilities.json
          echo "Vulnerability Summary:"
          CRITICAL_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "Critical")) | length' scan-results/grype-vulnerabilities.json)
          HIGH_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "High")) | length' scan-results/grype-vulnerabilities.json)
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          echo "critical_vulnerabilities=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_vulnerabilities=$HIGH_COUNT" >> $GITHUB_OUTPUT
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "WARNING: $CRITICAL_COUNT critical vulnerabilities found"
            echo "Top Critical Vulnerabilities:"
            jq -r '.matches | map(select(.vulnerability.severity == "Critical")) | .[0:5] | .[] | "\(.vulnerability.id) in \(.artifact.name) v\(.artifact.version)"' scan-results/grype-vulnerabilities.json
          fi

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ github.sha }}
          path: scan-results/
          retention-days: 30

      - name: Security Gate
        id: security_gate
        run: |
          CRITICAL_COUNT=${{ steps.vulnerability_scan.outputs.critical_vulnerabilities }}
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "FAILED: $CRITICAL_COUNT critical vulnerabilities found"
            echo "⛔ Security gate failed - pushing of image aborted"
            exit 1
          else
            echo "✅ Security gate passed - proceeding to push image"
          fi

      - name: Login to Azure Container Registry
        if: success()
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Tag and Push Docker image
        if: success()
        run: |
          # Tag met semver
          docker tag flask-app:${{ github.sha }} ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:${{ steps.semver.outputs.version }}
          # Tag met latest
          docker tag flask-app:${{ github.sha }} ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:latest
          # Tag met commit SHA
          docker tag flask-app:${{ github.sha }} ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:${{ github.sha }}
          
          # Push alle tags
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:${{ steps.semver.outputs.version }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:${{ github.sha }}
          
          echo "Successfully pushed secure image to Azure Container Registry with version ${{ steps.semver.outputs.version }}"

  upload_security_results:
    name: Upload Security Results to Security Tools
    needs: build_scan_push
    runs-on: ubuntu-latest
    steps:
      - name: Download Scan Results
        uses: actions/download-artifact@v4
        with:
          name: scan-results-${{ github.sha }}
          path: scan-results

      - name: Upload Grype to DefectDojo
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          echo "⌛ Uploading Grype scan"
          # Gebruik datum EN tijd formaat (ISO8601-achtig) voor betere traceerbaarheid
          SCAN_DATETIME=$(date +"%Y-%m-%dT%H:%M:%S")
          echo "Using scan datetime: $SCAN_DATETIME"
          
          curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DEFECTDOJO_API_KEY" \
            -F "scan_date=$SCAN_DATETIME" \
            -F "scan_type=Anchore Grype" \
            -F "close_old_findings=true" \
            -F "deduplication_on_engagement=true" \
            -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
            -F "file=@scan-results/grype-vulnerabilities.json"
          echo "✅ Grype scan uploaded"

      - name: Upload SBOM to Dependency-Track
        env:
          DT_URL: ${{ secrets.DEPENDENCYTRACK_URL }}
          DT_API_KEY: ${{ secrets.DEPENDENCYTRACK_API_KEY }}
          PROJECT_UUID: ${{ secrets.DEPENDENCYTRACK_PROJECT_UUID }}
        run: |
          echo "⌛ Uploading SBOM to Dependency-Track"
          curl -X POST "$DT_URL/api/v1/bom" \
            -H "X-API-Key: $DT_API_KEY" \
            -H "Content-Type: multipart/form-data" \
            -F "project=$PROJECT_UUID" \
            -F "bom=@scan-results/sbom.cyclonedx.json"
          echo "✅ SBOM uploaded to Dependency-Track"