name: Build and Version Docker Image
on:
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Type of version increment (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches: [main]

jobs:
  build_docker_image:
    name: Build and Version
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.semver.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate SemVer Tag
        id: semver
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            INCREMENT_TYPE="${{ github.event.inputs.version_increment }}"
          else
            INCREMENT_TYPE="patch"
          fi
          
          echo "Increment type: $INCREMENT_TYPE"
          
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          
          echo "Latest version: $LATEST_VERSION"
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          
          case "$INCREMENT_TYPE" in
            "major")
              MAJOR=$((MAJOR+1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR+1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH+1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Creating image with tag: $NEW_VERSION"

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: flask-app:${{ steps.semver.outputs.version }}
          push: false

      - name: Export Docker image
        run: |
          mkdir -p image-artifact
          docker save flask-app:${{ steps.semver.outputs.version }} > image-artifact/flask-app.tar
          echo ${{ steps.semver.outputs.version }} > image-artifact/version.txt

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image-artifact/
          retention-days: 1