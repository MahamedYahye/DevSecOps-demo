name: Build and Container Security
on:
  workflow_run:
    workflows: ["Source Code Security Scans"]
    types:
      - completed
  workflow_dispatch:

jobs:
  build_and_scan_image:
    name: Build and Scan Docker Image
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: flask-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false

      - name: Generate SBOM with Syft
        run: |
          mkdir -p build-results
          
          # Generate SBOM in multiple formats (assume Syft is installed on runner)
          syft flask-app:${{ github.sha }} -o cyclonedx-json=build-results/sbom.cyclonedx.json
          syft flask-app:${{ github.sha }} -o spdx-json=build-results/sbom.spdx.json
          
          echo "✅ SBOM generated successfully"
          echo "=== Package Summary ==="
          syft flask-app:${{ github.sha }} -o table | head -n 20

      - name: Scan image with Grype
        run: |
          # Scan the image and save results (assume Grype is installed on runner)
          grype flask-app:${{ github.sha }} -o json > build-results/grype-vulnerabilities.json
          
          # Display summary of findings
          echo "=== Vulnerability Summary ==="
          CRITICAL_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "Critical")) | length' build-results/grype-vulnerabilities.json)
          HIGH_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "High")) | length' build-results/grype-vulnerabilities.json)
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          # Show top critical/high findings
          echo "=== Top Critical/High Vulnerabilities ==="
          jq -r '.matches | map(select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High")) | .[0:10] | .[] | "\(.vulnerability.severity): \(.vulnerability.id) in \(.artifact.name) v\(.artifact.version)"' build-results/grype-vulnerabilities.json || echo "No critical/high vulnerabilities found"

      - name: Upload build results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-results
          path: build-results/
          if-no-files-found: warn

      - name: Check for critical vulnerabilities
        run: |
          CRITICAL_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "Critical")) | length' build-results/grype-vulnerabilities.json)
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "⚠️ WARNING: $CRITICAL_COUNT critical vulnerabilities found in the Docker image"
            # Uncomment the line below to fail the build if critical vulnerabilities are found
            # echo "For production deployments, you should consider failing the build here"
            # exit 1
          else
            echo "✅ No critical vulnerabilities found in the Docker image"
          fi