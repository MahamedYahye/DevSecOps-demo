# name: Build, Scan and Upload
# on:
#   workflow_run:
#     workflows: ["Advanced Security Scans"]
#     types:
#       - completed
#     branches: [main]
#   workflow_dispatch:
#     inputs:
#       version_increment:
#         description: 'Type of version increment (patch, minor, major)'
#         required: true
#         default: 'patch'
#         type: choice
#         options:
#           - patch
#           - minor
#           - major

# jobs:
#   check_sast_status:
#     name: Check SAST Workflow Status
#     runs-on: self-hosted
#     if: ${{ github.event_name == 'workflow_run' }}
#     steps:
#       - name: Check SAST workflow status
#         run: |
#           if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
#             echo "⛔ Previous SAST workflow did not succeed - aborting build"
#             exit 1
#           else
#             echo "✅ Previous SAST workflow succeeded - proceeding with build"
#           fi

#   build_and_scan_image:
#     name: Build and Scan Docker Image
#     needs: check_sast_status
#     if: ${{ github.event_name != 'workflow_run' || success() }}
#     runs-on: self-hosted
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0  # Volledige geschiedenis ophalen voor versie tagging

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Build Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           load: true
#           tags: flask-app:${{ github.sha }}
#           push: false

#       - name: Generate SBOM with Syft
#         run: |
#           mkdir -p build-results

#           docker run --rm \
#             -v /var/run/docker.sock:/var/run/docker.sock \
#             -v $(pwd)/build-results:/output \
#             anchore/syft:latest \
#             flask-app:${{ github.sha }} -o cyclonedx-json=/output/sbom.cyclonedx.json -o spdx-json=/output/sbom.spdx.json

#           echo "✅ SBOM generated successfully"
#           echo "=== Package Summary ==="
#           docker run --rm \
#             -v /var/run/docker.sock:/var/run/docker.sock \
#             anchore/syft:latest \
#             flask-app:${{ github.sha }} -o table | head -n 20

#       - name: Scan image with Grype
#         run: |
#           mkdir -p build-results

#           docker run --rm \
#             -v /var/run/docker.sock:/var/run/docker.sock \
#             anchore/grype:latest \
#             flask-app:${{ github.sha }} -o json > build-results/grype-vulnerabilities.json

#           # Display summary of findings
#           echo "=== Vulnerability Summary ==="
#           CRITICAL_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "Critical")) | length' build-results/grype-vulnerabilities.json)
#           HIGH_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "High")) | length' build-results/grype-vulnerabilities.json)

#           echo "Critical vulnerabilities: $CRITICAL_COUNT"
#           echo "High vulnerabilities: $HIGH_COUNT"

#           # Show top critical/high findings
#           echo "=== Top Critical/High Vulnerabilities ==="
#           jq -r '.matches | map(select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High")) | .[0:10] | .[] | "\(.vulnerability.severity): \(.vulnerability.id) in \(.artifact.name) v\(.artifact.version)"' build-results/grype-vulnerabilities.json || echo "No critical/high vulnerabilities found"

#       - name: Upload build results
#         uses: actions/upload-artifact@v4
#         if: always()
#         with:
#           name: build-results
#           path: build-results/
#           if-no-files-found: warn

#       - name: Check for critical vulnerabilities
#         id: vulnerability_check
#         run: |
#           CRITICAL_COUNT=$(jq '.matches | map(select(.vulnerability.severity == "Critical")) | length' build-results/grype-vulnerabilities.json)

#           if [ "$CRITICAL_COUNT" -gt 0 ]; then
#             echo "⚠️ WARNING: $CRITICAL_COUNT critical vulnerabilities found in the Docker image"
#             echo "has_critical_vulnerabilities=true" >> $GITHUB_OUTPUT
#             echo "For production deployments, consider failing the build here (uncomment line below)"
#             # exit 1
#           else
#             echo "✅ No critical vulnerabilities found in the Docker image"
#             echo "has_critical_vulnerabilities=false" >> $GITHUB_OUTPUT
#           fi

#   upload_to_defectdojo:
#     name: Upload to DefectDojo
#     needs: [build_and_scan_image]
#     runs-on: self-hosted
#     steps:
#       - uses: actions/download-artifact@v4
#         with:
#           path: all-results

#       - name: Validate Results
#         id: validate
#         run: |
#           echo "=== Validating Scan Outputs ==="
#           SBOM_OK=false
#           GRYPE_OK=false

#           if [ -f all-results/build-results/sbom.cyclonedx.json ]; then
#             echo "SBOM (CycloneDX): ✅ OK"
#             SBOM_OK=true
#           else
#             echo "SBOM (CycloneDX): ❌ Missing"
#           fi

#           if [ -f all-results/build-results/grype-vulnerabilities.json ]; then
#             echo "Grype: ✅ OK"
#             GRYPE_OK=true
#           else
#             echo "Grype: ❌ Missing"
#           fi

#           # Save results for later steps
#           echo "sbom_ok=$SBOM_OK" >> $GITHUB_OUTPUT
#           echo "grype_ok=$GRYPE_OK" >> $GITHUB_OUTPUT

#       - name: Upload to DefectDojo
#         env:
#           DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
#           DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
#           DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
#         run: |
#           SCAN_DATE=$(date +%Y-%m-%d)

#           # Enhanced error handling
#           upload_scan() {
#             local file=$1
#             local scan_type=$2
#             local scan_name=$3

#             echo "⌛ Uploading $scan_name ($scan_type)"

#             HTTP_CODE=$(curl -s -o response.txt -w "%{http_code}" \
#               -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
#               -H "Authorization: Token $DEFECTDOJO_API_KEY" \
#               -F "scan_date=$SCAN_DATE" \
#               -F "scan_type=$scan_type" \
#               -F "close_old_findings=true" \
#               -F "deduplication_on_engagement=true" \
#               -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
#               -F "file=@$file")

#             if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
#               echo "✅ Successfully uploaded $scan_name"
#               return 0
#             else
#               echo "❌ Upload failed for $scan_name with HTTP code $HTTP_CODE"
#               cat response.txt
#               return 1
#             fi
#           }

#           # Process scans
#           UPLOAD_FAILURES=0

#           if [ "${{ steps.validate.outputs.sbom_ok }}" == "true" ]; then
#             upload_scan all-results/build-results/sbom.cyclonedx.json "CycloneDX Scan" "SBOM" || ((UPLOAD_FAILURES++))
#           fi

#           if [ "${{ steps.validate.outputs.grype_ok }}" == "true" ]; then
#             upload_scan all-results/build-results/grype-vulnerabilities.json "Anchore Grype" "Grype" || ((UPLOAD_FAILURES++))
#           fi

#           echo "=== Upload Summary ==="
#           if [ "$UPLOAD_FAILURES" -eq 0 ]; then
#             echo "✅ All uploads processed successfully"
#           else
#             echo "⚠️ $UPLOAD_FAILURES upload(s) failed"
#             exit 1
#           fi

#   push_to_registry:
#     name: Push Image to GitHub Container Registry
#     needs: [build_and_scan_image, upload_to_defectdojo]
#     runs-on: self-hosted
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.PAT_GHCR }}

#       - name: Generate SemVer Tag
#         id: semver
#         run: |
#           # Bepaal welk type increment we willen doen
#           if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
#             INCREMENT_TYPE="${{ github.event.inputs.version_increment }}"
#           else
#             # Default naar patch voor automatische runs
#             INCREMENT_TYPE="patch"
#           fi

#           echo "Increment type: $INCREMENT_TYPE"

#           # Haal de laatste versie tag op of begin bij v0.0.0
#           LATEST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "v0.0.0")
#           LATEST_VERSION=${LATEST_TAG#v}

#           echo "Latest version: $LATEST_VERSION"

#           # Split versie in onderdelen
#           IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"

#           # Verhoog de juiste component op basis van increment type
#           case "$INCREMENT_TYPE" in
#             "major")
#               MAJOR=$((MAJOR+1))
#               MINOR=0
#               PATCH=0
#               ;;
#             "minor")
#               MINOR=$((MINOR+1))
#               PATCH=0
#               ;;
#             "patch")
#               PATCH=$((PATCH+1))
#               ;;
#           esac

#           # Stel nieuwe versie samen
#           NEW_VERSION="$MAJOR.$MINOR.$PATCH"
#           echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
#           echo "Creating image with tag: $NEW_VERSION"

#       - name: Build and Push Image
#         uses: docker/build-push-action@v3
#         with:
#           context: .
#           push: true
#           tags: ghcr.io/mahamedyahye/flask-app:${{ steps.semver.outputs.version }},ghcr.io/mahamedyahye/flask-app:latest

#       - name: Create Git Tag
#         run: |
#           git config --global user.name "GitHub Actions"
#           git config --global user.email "actions@github.com"
#           git tag -a "v${{ steps.semver.outputs.version }}" -m "Release v${{ steps.semver.outputs.version }}"
#           git push origin "v${{ steps.semver.outputs.version }}"
name: SBOM Generation and Upload to Dependency-Track
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  generate-sbom:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: flask-app:test
          push: false
          
      - name: Generate SBOM with Syft
        run: |
          mkdir -p sbom-results
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$(pwd)/sbom-results:/output" \
            anchore/syft:latest \
            flask-app:test \
            -o cyclonedx-json=/output/sbom.cyclonedx.json
            
      - name: Verify SBOM file
        run: |
          echo "Controleren of SBOM-bestand correct is aangemaakt..."
          if [ ! -f "sbom-results/sbom.cyclonedx.json" ]; then
            echo "❌ SBOM-bestand niet gevonden!"
            exit 1
          fi
          
          # Check bestandsgrootte
          FILESIZE=$(stat -f%z "sbom-results/sbom.cyclonedx.json" 2>/dev/null || stat -c%s "sbom-results/sbom.cyclonedx.json")
          echo "SBOM bestandsgrootte: $FILESIZE bytes"
          
          if [ "$FILESIZE" -lt 100 ]; then
            echo "❌ SBOM-bestand lijkt te klein!"
            cat "sbom-results/sbom.cyclonedx.json"
            exit 1
          fi
          
          echo "✅ SBOM-bestand lijkt correct"
          
      - name: Upload SBOM to Dependency-Track
        env:
          API_KEY: ${{ secrets.DEPENDENCYTRACK_API_KEY }}
          API_URL: ${{ secrets.DEPENDENCYTRACK_URL }}
        run: |
          # Hard-coded UUID van het project dat al bestaat in je systeem
          PROJECT_UUID="7021d1a0-5130-4ae1-ae0c-0c5983b43a24"
          
          echo "Uploading SBOM naar project UUID: $PROJECT_UUID"
          
          # Eenvoudige curl-opdracht met minimale headers
          curl -v "$API_URL/api/v1/bom/project/$PROJECT_UUID" \
            -X PUT \
            -H "X-Api-Key: $API_KEY" \
            -H "Content-Type: application/vnd.cyclonedx+json" \
            --data-binary @sbom-results/sbom.cyclonedx.json
          
          # We vertrouwen op de curl exit code
          if [ $? -eq 0 ]; then
            echo "✅ SBOM upload succesvol"
          else
            echo "❌ SBOM upload mislukt (curl exit code: $?)"
            exit 1
          fi