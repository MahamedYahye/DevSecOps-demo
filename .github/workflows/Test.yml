# name: Modular SAST Workflow
# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   gitleaks:
#     name: GitLeaks Security Scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code with full history
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
          
#       - name: Install GitLeaks
#         run: |
#           wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
#           tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
#           chmod +x gitleaks
#           sudo mv gitleaks /usr/local/bin/
          
#       - name: Run GitLeaks scan
#         id: gitleaks_scan
#         continue-on-error: true
#         run: |
#           # Scan en sla resultaten op
#           gitleaks detect --source=. --verbose --redact --report-format=json --report-path=gitleaks-results.json
          
#           # Toon bevindingen
#           echo "=== GitLeaks Resultaten ==="
#           if [ -f gitleaks-results.json ]; then
#             FOUND=$(jq 'length' gitleaks-results.json)
            
#             if [ "$FOUND" -gt 0 ]; then
#               echo "‚ö†Ô∏è GitLeaks heeft $FOUND potenti√´le geheimen gevonden"
#               jq -r '.[] | "- \(.Rule): \(.Description) in \(.File)"' gitleaks-results.json
#             else
#               echo "‚úÖ Geen geheimen gevonden"
#             fi
#           fi
          
#       - name: Upload GitLeaks Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: gitleaks-results
#           path: gitleaks-results.json
#           if-no-files-found: warn

#   semgrep:
#     name: Semgrep Scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.11'
        
#       - name: Install Semgrep
#         run: |
#           python -m pip install semgrep
        
#       - name: Run Semgrep scan
#         id: semgrep_scan
#         continue-on-error: true
#         run: |
#           # Maak results directory
#           mkdir -p semgrep-results
          
#           # Voer Semgrep uit
#           semgrep --config p/default --json --output semgrep-results/results.json .
          
#           # Toon bevindingen
#           echo "=== Semgrep Resultaten ==="
#           if [ -f semgrep-results/results.json ]; then
#             FINDINGS=$(jq '.results | length' semgrep-results/results.json)
            
#             if [ "$FINDINGS" -gt 0 ]; then
#               echo "‚ö†Ô∏è Semgrep heeft $FINDINGS bevindingen gedetecteerd"
#               jq -r '.results[] | "- \(.check_id): \(.extra.message) in \(.path):\(.start.line)"' semgrep-results/results.json
#             else
#               echo "‚úÖ Geen bevindingen gedetecteerd"
#             fi
#           else
#             echo "Geen Semgrep resultaten gevonden"
#           fi
          
#       - name: Upload Semgrep Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: semgrep-results
#           path: semgrep-results/
#           if-no-files-found: warn

#   bandit:
#     name: Bandit Security Scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
        
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.11'
          
#       - name: Install Bandit
#         run: |
#           python -m pip install bandit
          
#       - name: Run Bandit
#         id: bandit_scan
#         continue-on-error: true
#         run: |
#           # Maak results directory
#           mkdir -p bandit-results
          
#           # Productie-level scan
#           bandit -r . -ll -f json -o bandit-results/results.json || true
          
#           # Toon bevindingen
#           if [ -f bandit-results/results.json ]; then
#             echo "=== Beveiligingsproblemen ==="
#             HIGH_COUNT=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' bandit-results/results.json)
#             MEDIUM_COUNT=$(jq '.results | map(select(.issue_severity == "MEDIUM")) | length' bandit-results/results.json)
#             LOW_COUNT=$(jq '.results | map(select(.issue_severity == "LOW")) | length' bandit-results/results.json)
#             TOTAL=$((HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
            
#             echo "Hoog: $HIGH_COUNT, Gemiddeld: $MEDIUM_COUNT, Laag: $LOW_COUNT, Totaal: $TOTAL"
            
#             if [ "$TOTAL" -gt 0 ]; then
#               jq -r '.results[] | "[\(.issue_severity)] \(.issue_text) in \(.filename) lijn \(.line_number)"' bandit-results/results.json
#             fi
#           fi
          
#       - name: Upload Bandit Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: bandit-results
#           path: bandit-results/
#           if-no-files-found: warn

# # # Deze job toevoegen aan het einde van Test.yml
#   upload_scan_results:
#     name: Upload Scan Results to Security Tools
#     runs-on: ubuntu-latest
#     needs: [gitleaks, semgrep, bandit]  # Wacht tot alle scan jobs zijn afgerond
#     steps:
#       # Download artifacts
#       - name: Download Gitleaks Results
#         uses: actions/download-artifact@v4
#         with:
#           name: gitleaks-results
#           path: gitleaks-results

#       - name: Download Semgrep Results
#         uses: actions/download-artifact@v4
#         with:
#           name: semgrep-results
#           path: semgrep-results

#       - name: Download Bandit Results
#         uses: actions/download-artifact@v4
#         with:
#           name: bandit-results
#           path: bandit-results

#       # Upload alle scans naar DefectDojo
#       - name: Upload All Scans to DefectDojo
#         env:
#           DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
#           DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
#           DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
#         run: |
#           upload_scan_to_defectdojo() {
#             local file="$1"
#             local scan_type="$2"
#             local scan_name="$3"
            
#             # Datum en tijd voor de scan
#             SCAN_DATE=$(date +"%Y-%m-%d")
#             SCAN_TIME=$(date +"%H:%M:%S")
#             echo "‚åõ Uploading $scan_name scan (date: $SCAN_DATE, time: $SCAN_TIME)"
            
#             curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
#               -H "Authorization: Token $DEFECTDOJO_API_KEY" \
#               -F "scan_date=$SCAN_DATE" \
#               -F "scan_type=$scan_type" \
#               -F "test_title=$scan_name Scan $SCAN_DATE $SCAN_TIME" \
#               -F "tags=time_$SCAN_TIME" \
#               -F "description=$scan_name scan uitgevoerd op $SCAN_DATE om $SCAN_TIME" \
#               -F "close_old_findings=true" \
#               -F "deduplication_on_engagement=true" \
#               -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
#               -F "file=@$file"
            
#             echo "‚úÖ $scan_name scan uploaded"
#           }
          
#           # Upload scans
#           # Semgrep
#           upload_scan_to_defectdojo "semgrep-results/results.json" "Semgrep JSON Report" "Semgrep"
          
#           # Gitleaks
#           upload_scan_to_defectdojo "gitleaks-results/gitleaks-results.json" "Gitleaks Scan" "Gitleaks"
          
#           # Bandit
#           upload_scan_to_defectdojo "bandit-results/results.json" "Bandit Scan" "Bandit"


name: SAST Security Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  gitleaks:
    name: GitLeaks (Secrets)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run GitLeaks
        continue-on-error: true
        run: |
          wget -q https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.1_linux_x64.tar.gz && sudo mv gitleaks /usr/local/bin/
          
          gitleaks detect --source=. --report-format=json --report-path=gitleaks-results.json || true
          
          if [ -f gitleaks-results.json ]; then
            FOUND=$(jq 'length' gitleaks-results.json 2>/dev/null || echo "0")
            echo "üîç GitLeaks: $FOUND secrets found"
          fi
          
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: gitleaks-results.json

  semgrep:
    name: Semgrep (Code Security)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        
      - name: Run Semgrep
        continue-on-error: true
        run: |
          pip install semgrep
          mkdir -p semgrep-results
          
          semgrep --config p/default --json --output semgrep-results/results.json . || true
          
          if [ -f semgrep-results/results.json ]; then
            FINDINGS=$(jq '.results | length' semgrep-results/results.json 2>/dev/null || echo "0")
            echo "üîç Semgrep: $FINDINGS findings"
          fi
          
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results/

  bandit:
    name: Bandit (Python Security)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Run Bandit
        continue-on-error: true
        run: |
          pip install bandit
          mkdir -p bandit-results
          
          bandit -r . -ll -f json -o bandit-results/results.json || true
          
          if [ -f bandit-results/results.json ]; then
            HIGH=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' bandit-results/results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '.results | map(select(.issue_severity == "MEDIUM")) | length' bandit-results/results.json 2>/dev/null || echo "0")
            echo "üîç Bandit: $HIGH high, $MEDIUM medium issues"
          fi
          
      - uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-results/

  checkov:
    name: Checkov (Infrastructure Security)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: kubernetes,dockerfile,yaml,secrets
          output_format: json,sarif
          output_file_path: checkov-results
          soft_fail: true
          compact: true

      - name: Display Results
        run: |
          if [ -f checkov-results/results_json.json ]; then
            PASSED=$(jq '.summary.passed // 0' checkov-results/results_json.json)
            FAILED=$(jq '.summary.failed // 0' checkov-results/results_json.json)
            echo "üîç Checkov: $PASSED passed, $FAILED failed"
          fi
        
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: checkov-results/

  upload_to_defectdojo:
    name: Upload to DefectDojo
    runs-on: ubuntu-latest
    needs: [gitleaks, semgrep, bandit, checkov]
    if: always()
    steps:
      - name: Download All Results
        uses: actions/download-artifact@v4
        with:
          path: scan-results

      - name: Upload to DefectDojo
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          upload_scan() {
            local file="$1"
            local scan_type="$2"
            local scan_name="$3"
            
            if [ ! -f "$file" ]; then
              echo "‚ö†Ô∏è  $scan_name: file not found"
              return
            fi
            
            echo "üì§ Uploading $scan_name..."
            
            HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null \
              -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
              -H "Authorization: Token $DEFECTDOJO_API_KEY" \
              -F "scan_date=$(date +%Y-%m-%d)" \
              -F "scan_type=$scan_type" \
              -F "test_title=$scan_name $(date +%Y-%m-%d)" \
              -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
              -F "file=@$file")
              
            if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
              echo "‚úÖ $scan_name uploaded successfully"
            else
              echo "‚ùå $scan_name upload failed (HTTP: $HTTP_CODE)"
            fi
          }
          
          # Upload all scans
          upload_scan "scan-results/semgrep-results/results.json" "Semgrep JSON Report" "Semgrep"
          upload_scan "scan-results/gitleaks-results/gitleaks-results.json" "Gitleaks Scan" "GitLeaks"
          upload_scan "scan-results/bandit-results/results.json" "Bandit Scan" "Bandit"
          upload_scan "scan-results/checkov-results/results_json.json" "Checkov Scan" "Checkov"
          
          echo "üéâ All scans processed"