# name: Security Scans
# on:
#   push:
#     branches: [ main, master ]
#   pull_request:
#     branches: [ main, master ]
#   workflow_dispatch:

# permissions:
#   contents: read
#   security-events: write


# env:
#   DEFECTDOJO_UPLOAD: ${{ github.event_name == 'push' }}
#   SEMGREP_VERSION: "1.76.0"
#   GITLEAKS_VERSION: "v8.16.3"

# jobs:
#   security-scans:
#     name: Security Scans
#     runs-on: self-hosted
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
          
      
#       - name: Run Semgrep
#         run: |
#           # Gebruik een script om beide output formaten te genereren in één container run
#           docker run --rm --security-opt=no-new-privileges \
#             -v $(pwd):/src \
#             -e SEMGREP_APP_TOKEN=${{ secrets.SEMGREP_APP_TOKEN }} \
#             -e SEMGREP_REPO_URL=https://github.com/${{ github.repository }} \
#             semgrep/semgrep:${{ env.SEMGREP_VERSION }} \
#             bash -c "cd /src && semgrep --config=auto --json > semgrep-results.json && semgrep --config=auto --sarif > semgrep.sarif" 
          
#           # Controleer of bestanden bestaan
#           if [ -f semgrep-results.json ] && [ -f semgrep.sarif ]; then
#             echo "Semgrep output files created successfully"
#           else
#             echo "Warning: Some Semgrep output files are missing"
#           fi
      
#       - name: Upload to GitHub Security
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: semgrep.sarif
          
      
#       - name: Run Gitleaks
#         run: |
#           # Scan uitvoeren (doorgaan bij secrets gevonden)
#           docker run --rm --security-opt=no-new-privileges \
#             -v $(pwd):/path \
#             zricethezav/gitleaks:${{ env.GITLEAKS_VERSION }} detect \
#             --source="/path" --report-format json --report-path=/path/gitleaks-report.json || true
          
#           # Findings tonen in GitHub summary
#           if [ -f gitleaks-report.json ]; then
#             echo "## Gitleaks Findings" >> $GITHUB_STEP_SUMMARY
#             cat gitleaks-report.json | jq . >> $GITHUB_STEP_SUMMARY || echo "Failed to display Gitleaks findings"
#           fi
          
      
#       - name: Upload to DefectDojo
#         if: env.DEFECTDOJO_UPLOAD == 'true'
#         run: |
#           # Functie voor uploads
#           upload_to_defectdojo() {
#             local file=$1
#             local scan_type=$2
#             local description=$3
            
#             if [ ! -f "$file" ]; then
#               echo "$file not found, skipping upload"
#               return 1
#             fi
            
#             echo "Uploading $description to DefectDojo..."
#             RESULT=$(curl -s -w "\n%{http_code}" -X POST \
#               -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
#               -F "scan_date=$(date +%Y-%m-%d)" \
#               -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
#               -F "file=@$file" \
#               -F "scan_type=$scan_type" \
#               -F "close_old_findings=true" \
#               ${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/)
            
#             STATUS_CODE=$(echo "$RESULT" | tail -n1)
#             CONTENT=$(echo "$RESULT" | sed '$d')
            
#             echo "$description upload status: $STATUS_CODE"
#             echo "Response: $CONTENT"
#           }
          
#           # Execute uploads
#           upload_to_defectdojo "semgrep-results.json" "Semgrep JSON Report" "Semgrep"
#           upload_to_defectdojo "gitleaks-report.json" "Gitleaks Scan" "Gitleaks"
name: Security Scans
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

env:
  DEFECTDOJO_UPLOAD: ${{ github.event_name == 'push' }}
  SEMGREP_VERSION: "1.76.0"
  GITLEAKS_VERSION: "v8.16.3"
  SYFT_VERSION: "v0.93.0"
  GRYPE_VERSION: "v0.73.0"

jobs:
  security-scans:
    name: Security Scans
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Run Semgrep
        run: |
          # Gebruik een script om beide output formaten te genereren in één container run
          docker run --rm --security-opt=no-new-privileges \
            -v $(pwd):/src \
            -e SEMGREP_APP_TOKEN=${{ secrets.SEMGREP_APP_TOKEN }} \
            -e SEMGREP_REPO_URL=https://github.com/${{ github.repository }} \
            semgrep/semgrep:${{ env.SEMGREP_VERSION }} \
            bash -c "cd /src && semgrep --config=auto --json > semgrep-results.json && semgrep --config=auto --sarif > semgrep.sarif"
          
          # Controleer of bestanden bestaan
          if [ -f semgrep-results.json ] && [ -f semgrep.sarif ]; then
            echo "Semgrep output files created successfully"
          else
            echo "Warning: Some Semgrep output files are missing"
          fi
          
      - name: Upload to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          
      - name: Run Gitleaks
        run: |
          # Scan uitvoeren (doorgaan bij secrets gevonden)
          docker run --rm --security-opt=no-new-privileges \
            -v $(pwd):/path \
            zricethezav/gitleaks:${{ env.GITLEAKS_VERSION }} detect \
            --source="/path" --report-format json --report-path=/path/gitleaks-report.json || true
            
          # Findings tonen in GitHub summary
          if [ -f gitleaks-report.json ]; then
            echo "## Gitleaks Findings" >> $GITHUB_STEP_SUMMARY
            cat gitleaks-report.json | jq . >> $GITHUB_STEP_SUMMARY || echo "Failed to display Gitleaks findings"
          fi
          
      - name: Run Syft (SBOM Generator)
        run: |
          # Genereer SBOM met Syft (JSON en SPDX formaten)
          docker run --rm --security-opt=no-new-privileges \
            -v $(pwd):/src \
            anchore/syft:${{ env.SYFT_VERSION }} \
            /src -o json=/src/syft-sbom.json -o spdx-json=/src/syft-spdx.json
            
          # Controleer of bestanden bestaan
          if [ -f syft-sbom.json ] && [ -f syft-spdx.json ]; then
            echo "Syft SBOM files created successfully"
            echo "## SBOM Summary" >> $GITHUB_STEP_SUMMARY
            cat syft-sbom.json | jq '.artifacts | length' | xargs echo "Total packages detected: " >> $GITHUB_STEP_SUMMARY
          else
            echo "Warning: Syft output files are missing"
          fi
          
      - name: Run Grype (Vulnerability Scanner)
        run: |
          # Scan op kwetsbaarheden met Grype tegen de eerder gegenereerde SBOM
          docker run --rm --security-opt=no-new-privileges \
            -v $(pwd):/src \
            anchore/grype:${{ env.GRYPE_VERSION }} \
            sbom:/src/syft-sbom.json -o json=/src/grype-vulnerabilities.json
            
          # Controleer of rapport bestaat en toon samenvatting
          if [ -f grype-vulnerabilities.json ]; then
            echo "Grype vulnerability report created successfully"
            echo "## Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
            cat grype-vulnerabilities.json | jq '.matches | length' | xargs echo "Total vulnerabilities found: " >> $GITHUB_STEP_SUMMARY
            cat grype-vulnerabilities.json | jq '.matches[] | .vulnerability.severity' | sort | uniq -c | sort -r >> $GITHUB_STEP_SUMMARY
          else
            echo "Warning: Grype output file is missing"
          fi
          
      - name: Upload to DefectDojo
        if: env.DEFECTDOJO_UPLOAD == 'true'
        run: |
          # Functie voor uploads
          upload_to_defectdojo() {
            local file=$1
            local scan_type=$2
            local description=$3
            if [ ! -f "$file" ]; then
              echo "$file not found, skipping upload"
              return 1
            fi
            echo "Uploading $description to DefectDojo..."
            RESULT=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
              -F "scan_date=$(date +%Y-%m-%d)" \
              -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
              -F "file=@$file" \
              -F "scan_type=$scan_type" \
              -F "close_old_findings=true" \
              ${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/)
            STATUS_CODE=$(echo "$RESULT" | tail -n1)
            CONTENT=$(echo "$RESULT" | sed '$d')
            echo "$description upload status: $STATUS_CODE"
            echo "Response: $CONTENT"
          }
          
          # Execute uploads
          upload_to_defectdojo "semgrep-results.json" "Semgrep JSON Report" "Semgrep"
          upload_to_defectdojo "gitleaks-report.json" "Gitleaks Scan" "Gitleaks"
          upload_to_defectdojo "syft-sbom.json" "Anchore Enterprise Policy Violation" "Syft SBOM"
          upload_to_defectdojo "grype-vulnerabilities.json" "Anchore Grype" "Grype Vulnerabilities"
