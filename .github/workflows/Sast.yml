name: Source Code Security Scans
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  semgrep:
    name: Semgrep (Full Security Scan)
    runs-on: self-hosted
    outputs:
      scan_status: ${{ steps.semgrep_run.outputs.scan_status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Semgrep
        id: semgrep_run
        run: |
          mkdir -p semgrep-results
          docker run --rm --security-opt=no-new-privileges \
            -v $(pwd):/src \
            -e SEMGREP_APP_TOKEN=${{ secrets.SEMGREP_APP_TOKEN }} \
            -e SEMGREP_REPO_URL=https://github.com/${{ github.repository }} \
            semgrep/semgrep:latest \
            bash -c "cd /src && semgrep --config=auto --sarif=/src/semgrep-results/scan.sarif --json=/src/semgrep-results/semgrep-results.json"
          
          if [ -f semgrep-results/semgrep-results.json ] && [ -f semgrep-results/scan.sarif ]; then
            echo "✅ Semgrep output files created successfully"
            echo "scan_status=success" >> $GITHUB_OUTPUT
            echo "=== Top 10 Findings ==="
            jq -r '.results[] | "\(.extra.severity): \(.extra.message)"' semgrep-results/semgrep-results.json 2>/dev/null | head -n 10 || echo "No findings or error parsing results"
          else
            echo "⚠️ Warning: Some Semgrep output files are missing"
            echo "scan_status=incomplete" >> $GITHUB_OUTPUT
          fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep-results/
          if-no-files-found: warn

  bandit_scan:
    name: Bandit (Full Python Audit)
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Run Aggressive Bandit Scan
        run: |
          mkdir -p bandit-results
          docker run --rm -v "${{ github.workspace }}:/src" python:3.11-slim bash -c \
            "pip install bandit -q && cd /src && \
             bandit -r . -f json -o /src/bandit-results/report.json \
                   --skip B101,B104 \
                   --ignore-nosec || exit_code=\$?"
          
          # Check if output file was created regardless of exit code
          if [ -f bandit-results/report.json ]; then
            echo "✅ Bandit scan completed and generated report"
            echo "=== Critical Findings ==="
            jq -r '.results[] | select(.issue_severity == "HIGH") | .issue_text' bandit-results/report.json 2>/dev/null | sort | uniq -c || echo "No critical findings or error parsing results"
          else
            echo "❌ Bandit scan failed to produce output"
            exit 1
          fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-results/
          if-no-files-found: warn

  gitleaks:
    name: GitLeaks (Deep Secrets Scan)
    runs-on: self-hosted
    env:
      GITLEAKS_VERSION: v8.18.1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secrets detection

      - name: Run Thorough GitLeaks Scan
        run: |
          mkdir -p gitleaks-results
          docker run --rm -v "${{ github.workspace }}:/path" zricethezav/gitleaks:$GITLEAKS_VERSION \
            detect --source="/path" \
                  --report-format=json \
                  --report-path=/path/gitleaks-results/report.json \
                  --verbose \
                  --redact \
                  --exit-code=0
          
          # Check if output file was created
          if [ -f gitleaks-results/report.json ]; then
            echo "✅ GitLeaks scan completed successfully"
            echo "=== Potential Secrets ==="
            jq -r '.[] | "\(.Description): \(.Secret)"' gitleaks-results/report.json | head -n 20 || echo "No findings or error parsing results"
          else
            echo "⚠️ GitLeaks did not find any issues or failed to produce output"
          fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gitleaks-results
          path: gitleaks-results/
          if-no-files-found: warn