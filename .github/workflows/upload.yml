name: Upload Security Results
on:
  workflow_run:
    workflows: ["Modular SAST Workflow", "Build, Scan and Push"]
    types:
      - completed
      

jobs:
  upload_security_results:
    name: Upload to DefectDojo & Dependency-Track
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: '*'
          path: artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
        continue-on-error: true
      
      - name: Organize artifacts
        run: |
          mkdir -p sast-results docker-results
          
          find artifacts -name "gitleaks-results*" -type d -exec cp -r {} sast-results/ \;
          find artifacts -name "semgrep-results*" -type d -exec cp -r {} sast-results/ \;
          find artifacts -name "bandit-results*" -type d -exec cp -r {} sast-results/ \;
          find artifacts -name "scan-results*" -type d -exec cp -r {} docker-results/ \;
          
          echo "=== Artifacts Structure ==="
          find sast-results -type f | sort || echo "No SAST results found"
          find docker-results -type f | sort || echo "No Docker results found"
      
      # DefectDojo uploads - SAST resultaten
      - name: Upload GitLeaks results to DefectDojo
        if: hashFiles('sast-results/gitleaks-results*/gitleaks-results.json') != ''
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          GITLEAKS_FILE=$(find sast-results -name "gitleaks-results.json" | head -1)
          
          if [ -n "$GITLEAKS_FILE" ]; then
            echo "Uploading $GITLEAKS_FILE to DefectDojo"
            
            curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
              -H "Authorization: Token $DEFECTDOJO_API_KEY" \
              -F "scan_type=GitLeaks Scan" \
              -F "file=@$GITLEAKS_FILE" \
              -F "engagement=$ENGAGEMENT_ID" \
              -F "close_old_findings=true" \
              -F "scan_date=$(date +'%Y-%m-%d')"
              
            echo "✅ GitLeaks results successfully uploaded to DefectDojo"
          else
            echo "⚠️ No GitLeaks results found to upload"
          fi
      
      - name: Upload Semgrep results to DefectDojo
        if: hashFiles('sast-results/semgrep-results*/results.json') != ''
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          SEMGREP_FILE=$(find sast-results -name "results.json" -path "*/semgrep-results*/*" | head -1)
          
          if [ -n "$SEMGREP_FILE" ]; then
            echo "Uploading $SEMGREP_FILE to DefectDojo"
            
            curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
              -H "Authorization: Token $DEFECTDOJO_API_KEY" \
              -F "scan_type=Semgrep JSON Report" \
              -F "file=@$SEMGREP_FILE" \
              -F "engagement=$ENGAGEMENT_ID" \
              -F "close_old_findings=true" \
              -F "scan_date=$(date +'%Y-%m-%d')"
              
            echo "✅ Semgrep results successfully uploaded to DefectDojo"
          else
            echo "⚠️ No Semgrep results found to upload"
          fi
      
      - name: Upload Bandit results to DefectDojo
        if: hashFiles('sast-results/bandit-results*/results.json') != ''
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          BANDIT_FILE=$(find sast-results -name "results.json" -path "*/bandit-results*/*" | head -1)
          
          if [ -n "$BANDIT_FILE" ]; then
            echo "Uploading $BANDIT_FILE to DefectDojo"
            
            curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
              -H "Authorization: Token $DEFECTDOJO_API_KEY" \
              -F "scan_type=Bandit Scan" \
              -F "file=@$BANDIT_FILE" \
              -F "engagement=$ENGAGEMENT_ID" \
              -F "close_old_findings=true" \
              -F "scan_date=$(date +'%Y-%m-%d')"
              
            echo "✅ Bandit results successfully uploaded to DefectDojo"
          else
            echo "⚠️ No Bandit results found to upload"
          fi
      
      # DefectDojo uploads - Docker scan resultaten met Grype
      - name: Upload Grype vulnerability results to DefectDojo
        if: hashFiles('docker-results/scan-results*/grype-vulnerabilities.json') != ''
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          GRYPE_FILE=$(find docker-results -name "grype-vulnerabilities.json" | head -1)
          
          if [ -n "$GRYPE_FILE" ]; then
            echo "Uploading $GRYPE_FILE to DefectDojo"
            
            curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
              -H "Authorization: Token $DEFECTDOJO_API_KEY" \
              -F "scan_type=Anchore Grype" \
              -F "file=@$GRYPE_FILE" \
              -F "engagement=$ENGAGEMENT_ID" \
              -F "close_old_findings=true" \
              -F "scan_date=$(date +'%Y-%m-%d')"
              
            echo "✅ Grype vulnerability results successfully uploaded to DefectDojo"
          else
            echo "⚠️ No Grype vulnerability results found to upload"
          fi
      
      # Dependency-Track upload - SBOM
      - name: Upload SBOM to Dependency-Track
        if: hashFiles('docker-results/scan-results*/sbom.cyclonedx.json') != ''
        env:
          DT_URL: ${{ secrets.DEPENDENCYTRACK_URL }}
          DT_API_KEY: ${{ secrets.DEPENDENCYTRACK_API_KEY }}
          PROJECT_UUID: ${{ secrets.DEPENDENCYTRACK_PROJECT_UUID }}
        run: |
          SBOM_FILE=$(find docker-results -name "sbom.cyclonedx.json" | head -1)
          
          if [ -n "$SBOM_FILE" ]; then
            echo "Uploading $SBOM_FILE to Dependency-Track"
            
            # SBOM uploaden naar bestaand project UUID
            SBOM_BASE64=$(base64 -w 0 $SBOM_FILE)
            RESPONSE=$(curl -s -X POST "$DT_URL/api/v1/bom" \
              -H "X-API-Key: $DT_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{\"project\":\"$PROJECT_UUID\", \"bom\":\"$SBOM_BASE64\"}")
              
            if [[ "$RESPONSE" == *"Processing of the BOM will occur asynchronously"* ]]; then
              echo "✅ Successfully uploaded SBOM to Dependency-Track"
            else
              echo "⚠️ Upload to Dependency-Track may have issues: $RESPONSE"
            fi
          else
            echo "⚠️ No SBOM file found to upload"
          fi