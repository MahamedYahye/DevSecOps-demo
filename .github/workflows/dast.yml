# name: OWASP ZAP Security Scan

# on:
#     workflow_dispatch:  
#     push:
#       branches: [ main ]  
# jobs:
#  zap-scan:
#    runs-on: self-hosted  
   
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
   
#    - name: Test URL connectivity
#      run: |
#        echo "Testing connection to target URL: http://localhost:8081"
#        if curl -s --head --fail http://localhost:8081 > /dev/null; then
#          echo "✅ Connection successful"
#        else
#          echo "❌ Connection failed - URL is not accessible"
#          echo "Make sure port-forwarding is running with: kubectl port-forward service/flask-app 8081:80"
#          exit 1
#        fi
   
#    - name: Run ZAP Scan
#      run: |
#        echo "Scanning target URL: http://host.docker.internal:8081"
#        mkdir -p zap-report
#        docker run --rm \
#          -v "$(pwd)/zap-report:/zap/wrk" \
#          zaproxy/zap-stable:latest \
#          zap-baseline.py -t http://host.docker.internal:8081 -g gen.conf -r zap-report.html
   
#    - name: Check ZAP result
#      run: |
#        if [ -f "zap-report/zap-report.html" ]; then
#          echo "✅ ZAP scan complete. Results saved to zap-report directory."
#          ls -la zap-report/
#        else
#          echo "❌ ZAP report not found. The scan might have failed."
#          exit 1
#        fi
   
#    - name: Upload ZAP report
#      if: always()  # Upload report even if previous steps failed
#      uses: actions/upload-artifact@v4
#      with:
#        name: zap-report
#        path: zap-report

name: OWASP ZAP Security Scan

on:
  workflow_run:
    workflows: ["Build, Scan and Upload"]
    types:
      - completed
    branches: [main]

jobs:
  check_build_status:
    name: Check Build Workflow Status
    runs-on: self-hosted
    steps:
      - name: Check build workflow status
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "⛔ Previous build workflow did not succeed - aborting DAST scan"
            exit 1
          else
            echo "✅ Previous build workflow succeeded - proceeding with DAST scan"
          fi

  wait_for_deployment:
    name: Wait for Application Deployment
    needs: [check_build_status]
    runs-on: self-hosted
    steps:
      - name: Initial wait for Argo CD
        run: |
          echo "Waiting for Argo CD to process the new deployment..."
          sleep 60  # Initial wait to give Argo CD time to start the deployment

      - name: Verify application availability
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0
          SUCCESS_COUNT=0
          REQUIRED_SUCCESSES=3
          
          echo "Verifying application availability at http://localhost:8081"
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ $SUCCESS_COUNT -lt $REQUIRED_SUCCESSES ]; do
            RETRY_COUNT=$((RETRY_COUNT+1))
            
            if curl -s --head --fail http://localhost:8081 > /dev/null; then
              SUCCESS_COUNT=$((SUCCESS_COUNT+1))
              echo "✅ Health check succeeded ($SUCCESS_COUNT/$REQUIRED_SUCCESSES)"
            else
              SUCCESS_COUNT=0
              echo "❌ Health check failed, resetting success count"
            fi
            
            if [ $SUCCESS_COUNT -lt $REQUIRED_SUCCESSES ]; then
              echo "Waiting 30 seconds before next check..."
              sleep 30
            fi
          done
          
          if [ $SUCCESS_COUNT -ge $REQUIRED_SUCCESSES ]; then
            echo "✅ Application deployment verified! Ready for security scan."
          else
            echo "❌ Could not verify application deployment after maximum attempts"
            exit 1
          fi

  zap-scan:
    name: ZAP Security Scan
    needs: [wait_for_deployment]
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
   
    - name: Run ZAP Scan
      run: |
        echo "Scanning target URL: http://host.docker.internal:3000"
        mkdir -p zap-report
        docker run --rm \
          -v "$(pwd)/zap-report:/zap/wrk" \
          zaproxy/zap-stable:latest \
          zap-baseline.py -t http://host.docker.internal:3000 -g gen.conf -r zap-report.html
   
    - name: Check ZAP result
      run: |
        if [ -f "zap-report/zap-report.html" ]; then
          echo "✅ ZAP scan complete. Results saved to zap-report directory."
          ls -la zap-report/
        else
          echo "❌ ZAP report not found. The scan might have failed."
          exit 1
        fi
   
    - name: Upload ZAP report
      if: always()  # Upload report even if previous steps failed
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: zap-report

  upload_to_defectdojo:
    name: Upload DAST Results to DefectDojo
    needs: [zap-scan]
    runs-on: self-hosted
    if: success()
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: zap-report
          path: zap-results

      - name: Validate Results
        run: |
          echo "=== Validating ZAP Scan Output ==="
          if [ -f zap-results/zap-report.html ]; then
            echo "ZAP Report: ✅ OK"
          else
            echo "ZAP Report: ❌ Missing"
            exit 1
          fi

      - name: Upload to DefectDojo
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          SCAN_DATE=$(date +%Y-%m-%d)

          HTTP_CODE=$(curl -s -o response.txt -w "%{http_code}" \
            -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DEFECTDOJO_API_KEY" \
            -F "scan_date=$SCAN_DATE" \
            -F "scan_type=ZAP Scan" \
            -F "close_old_findings=true" \
            -F "deduplication_on_engagement=true" \
            -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
            -F "file=@zap-results/zap-report.html")

          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "✅ Successfully uploaded ZAP scan results to DefectDojo"
          else
            echo "❌ Upload failed with HTTP code $HTTP_CODE"
            cat response.txt
            exit 1
          fi