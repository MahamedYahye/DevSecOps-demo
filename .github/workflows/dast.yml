# name: OWASP ZAP Security Scan

# on:
#     workflow_dispatch:  
#     push:
#       branches: [ main ]  
# jobs:
#  zap-scan:
#    runs-on: self-hosted  
   
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
   
#    - name: Test URL connectivity
#      run: |
#        echo "Testing connection to target URL: http://localhost:8081"
#        if curl -s --head --fail http://localhost:8081 > /dev/null; then
#          echo "✅ Connection successful"
#        else
#          echo "❌ Connection failed - URL is not accessible"
#          echo "Make sure port-forwarding is running with: kubectl port-forward service/flask-app 8081:80"
#          exit 1
#        fi
   
#    - name: Run ZAP Scan
#      run: |
#        echo "Scanning target URL: http://host.docker.internal:8081"
#        mkdir -p zap-report
#        docker run --rm \
#          -v "$(pwd)/zap-report:/zap/wrk" \
#          zaproxy/zap-stable:latest \
#          zap-baseline.py -t http://host.docker.internal:8081 -g gen.conf -r zap-report.html
   
#    - name: Check ZAP result
#      run: |
#        if [ -f "zap-report/zap-report.html" ]; then
#          echo "✅ ZAP scan complete. Results saved to zap-report directory."
#          ls -la zap-report/
#        else
#          echo "❌ ZAP report not found. The scan might have failed."
#          exit 1
#        fi
   
#    - name: Upload ZAP report
#      if: always()  # Upload report even if previous steps failed
#      uses: actions/upload-artifact@v4
#      with:
#        name: zap-report
#        path: zap-report

name: OWASP ZAP Security Scan

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Elke maandag om 2:00 UTC

jobs:
  wait_for_build_workflow:
    name: Wait for Build Workflow
    runs-on: self-hosted
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Check if Build workflow exists
        id: check_workflow
        run: |
          # Maximum aantal seconden om te wachten
          MAX_WAIT_TIME=900  # 15 minuten
          START_TIME=$(date +%s)
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=0
          BUILD_COMPLETE=false
          COMMIT_SHA="${{ github.sha }}"
          
          echo "Checking for Build, Scan and Upload workflow for commit $COMMIT_SHA"
          
          while [ $ELAPSED_TIME -lt $MAX_WAIT_TIME ] && [ "$BUILD_COMPLETE" != "true" ]; do
            # GitHub API aanroepen om workflow runs te controleren
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/actions/workflows/Build.yml/runs?event=push&status=completed&head_sha=$COMMIT_SHA")
            
            # Controleer of er tenminste één voltooide workflow run is
            COMPLETED_RUNS=$(echo "$RESPONSE" | jq '.total_count')
            
            if [ "$COMPLETED_RUNS" -gt 0 ]; then
              BUILD_COMPLETE=true
              CONCLUSION=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].conclusion')
              echo "✅ Build workflow voor commit $COMMIT_SHA is voltooid met status: $CONCLUSION"
            else
              # Bereken verstreken tijd
              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
              REMAINING_TIME=$((MAX_WAIT_TIME - ELAPSED_TIME))
              
              if [ $REMAINING_TIME -gt 0 ]; then
                echo "⏳ Nog geen voltooide build workflow gevonden. Wachten (${ELAPSED_TIME}s verstreken, ${REMAINING_TIME}s resterend)..."
                sleep 30
              fi
            fi
          done
          
          if [ "$BUILD_COMPLETE" != "true" ]; then
            echo "⚠️ Timeout bereikt. Geen voltooide build workflow gevonden binnen ${MAX_WAIT_TIME} seconden."
            echo "Doorgaan met DAST scan op de laatst beschikbare versie."
          fi

  zap-scan:
    runs-on: self-hosted
    needs: [wait_for_build_workflow]
    if: ${{ always() }}  # Altijd uitvoeren, zelfs als de vorige job faalt
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
   
    - name: Test URL connectivity
      run: |
        echo "Testing connection to target URL: http://localhost:8081"
        # Meerdere pogingen om connectie te maken, met pauzes ertussen
        MAX_RETRIES=5
        RETRY_COUNT=0
        SUCCESS=false

        while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" != "true" ]; do
          if curl -s --head --fail http://localhost:8081 > /dev/null; then
            echo "✅ Connection successful"
            SUCCESS=true
          else
            RETRY_COUNT=$((RETRY_COUNT+1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "⏳ Connection attempt $RETRY_COUNT failed - retrying in 30 seconds"
              sleep 30
            else
              echo "❌ All connection attempts failed - URL is not accessible"
              echo "Make sure port-forwarding is running with: kubectl port-forward service/flask-app 8081:80"
              exit 1
            fi
          fi
        done
   
    - name: Run ZAP Scan
      run: |
        echo "Scanning target URL: http://host.docker.internal:8081"
        mkdir -p zap-report
        docker run --rm \
          -v "$(pwd)/zap-report:/zap/wrk" \
          zaproxy/zap-stable:latest \
          zap-baseline.py -t http://host.docker.internal:8081 -g gen.conf -r zap-report.html
   
    - name: Check ZAP result
      run: |
        if [ -f "zap-report/zap-report.html" ]; then
          echo "✅ ZAP scan complete. Results saved to zap-report directory."
          ls -la zap-report/
        else
          echo "❌ ZAP report not found. The scan might have failed."
          exit 1
        fi
   
    - name: Upload ZAP report
      if: always()  # Upload report even if previous steps failed
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: zap-report

  upload_to_defectdojo:
    name: Upload DAST Results to DefectDojo
    needs: [zap-scan]
    runs-on: self-hosted
    if: success()
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: zap-report
          path: zap-results

      - name: Validate Results
        run: |
          echo "=== Validating ZAP Scan Output ==="
          if [ -f zap-results/zap-report.html ]; then
            echo "ZAP Report: ✅ OK"
          else
            echo "ZAP Report: ❌ Missing"
            exit 1
          fi

      - name: Upload to DefectDojo
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          SCAN_DATE=$(date +%Y-%m-%d)

          HTTP_CODE=$(curl -s -o response.txt -w "%{http_code}" \
            -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DEFECTDOJO_API_KEY" \
            -F "scan_date=$SCAN_DATE" \
            -F "scan_type=ZAP Scan" \
            -F "close_old_findings=true" \
            -F "deduplication_on_engagement=true" \
            -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
            -F "file=@zap-results/zap-report.html")

          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "✅ Successfully uploaded ZAP scan results to DefectDojo"
          else
            echo "❌ Upload failed with HTTP code $HTTP_CODE"
            cat response.txt
            exit 1
          fi