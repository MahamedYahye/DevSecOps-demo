# name: DAST Scan with OWASP ZAP
# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:
#     inputs:
#       target_url:
#         description: 'URL to scan'
#         required: true
#         default: 'http://192.168.49.2:3000'

# jobs:
#   zap_scan:
#     name: ZAP DAST Scan
#     runs-on: self-hosted

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Determine target URL
#         run: |
#           if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
#             echo "TARGET_URL=${{ github.event.inputs.target_url }}" >> $GITHUB_ENV
#           else
#             echo "TARGET_URL=http://192.168.49.2:3000" >> $GITHUB_ENV
#           fi
#           echo "Using target URL: $TARGET_URL"

#       - name: Verify application availability
#         run: |
#           if curl -s "$TARGET_URL" > /dev/null; then
#             echo "✅ Application is accessible at $TARGET_URL"
#           else
#             echo "❌ Application is not accessible at $TARGET_URL"
#             exit 1
#           fi

#       - name: Run ZAP Scan
#         run: |
#           mkdir -p zap-results

#           docker run --rm --network host \
#             -v "$(pwd)/zap-results:/zap/wrk:rw" \
#             zaproxy/zap-stable:latest \
#             zap-baseline.py \
#               -t "$TARGET_URL" \
#               -r /zap/wrk/zap-report.html \
#               -x /zap/wrk/zap-report.xml \
#               -I \
#               -a \
#             > zap-scan.log 2>&1 || true

#       - name: Upload scan log as artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: zap-scan-log
#           path: zap-scan.log
#           retention-days: 1

#       - name: Upload scan results as artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: zap-results
#           path: zap-results/
#           retention-days: 30

#       - name: Upload to DefectDojo
#         env:
#           DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
#           DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
#           DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
#         run: |
#           if [ -f "zap-results/zap-report.xml" ]; then
#             echo "Uploading ZAP XML results to DefectDojo..."
#             curl -s -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
#               -H "Authorization: Token $DEFECTDOJO_API_KEY" \
#               -F "scan_date=$(date +%Y-%m-%d)" \
#               -F "scan_type=ZAP Scan" \
#               -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
#               -F "file=@zap-results/zap-report.xml"

#             echo "✅ Results uploaded to DefectDojo successfully"
#           else
#             echo "❌ ZAP XML report not found in zap-results/ — skipping upload to DefectDojo"
#           fi


name: DAST Security Scan

on:
  push:
    branches: [main]
  workflow_dispatch:  # Voor handmatige triggers

jobs:
  dast_scan:
    name: Run DAST Scan
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Check and Start kubectl port-forward
        id: start_port_forward
        run: |
          # Functie om te controleren of een poort beschikbaar is
          is_port_available() {
            local port=$1
            timeout 1 bash -c "cat < /dev/tcp/localhost/$port" > /dev/null 2>&1
            return $?
          }

          # Functie om kubectl port-forward te starten met foutafhandeling
          start_port_forward() {
            local target_port=$1
            local attempts=$2
            for ((i=1; i<=$attempts; i++)); do
              if is_port_available $target_port; then
                echo "Starting kubectl port-forward on port $target_port..."
                kubectl port-forward deployment/flask-app $target_port:5000 &
                sleep 5 # Wacht even
                curl -s http://localhost:$target_port && echo "Port-forward success on port $target_port" && echo "APP_PORT=$target_port" >> $GITHUB_OUTPUT && echo "PORT_FORWARD_PID=$!" >> $GITHUB_OUTPUT && return 0
              else
                echo "Port $target_port is busy. Attempt $i of $attempts"
                if [ $i -lt $attempts ]; then
                  sleep 5
                else
                  echo "Failed to start kubectl port-forward after $attempts attempts"
                  return 1
                fi
              fi
            done
          }

          # Probeer de standaardpoort
          if ! start_port_forward 3050 3; then
            # Probeer een alternatieve poort
            if ! start_port_forward 3051 3; then
              echo "Failed to start kubectl port-forward on both ports 3000 and 3001"
              exit 1
            fi
          fi

      - name: Run OWASP ZAP scan
        continue-on-error: true
        run: |
          mkdir -p zap-output

          APP_PORT=${{ steps.start_port_forward.outputs.APP_PORT }}
          echo "Starting OWASP ZAP baseline scan against localhost:$APP_PORT..."

          docker run --rm \
            --network="host" \
            -v "$(pwd)/zap-output:/zap/wrk/" \
            zaproxy/zap-stable:latest zap-baseline.py \
            -t http://localhost:$APP_PORT \
            -r zap-report.html \
            -x zap-report.xml \
            -J zap-report.json \
            -a

          echo "=== ZAP Scan Complete ==="

          # Resultatenanalyse (zoals eerder)
          if [ -f "zap-output/zap-report.html" ]; then
            # ...
          else
            echo "Error: No HTML report was generated."
          fi

      - name: Stop kubectl port-forward
        if: always()  # Altijd uitvoeren, zelfs als de scan faalt
        run: |
          echo "Stopping kubectl port-forward..."
          PORT_FORWARD_PID=${{ steps.start_port_forward.outputs.PORT_FORWARD_PID }}
          if [ -n "$PORT_FORWARD_PID" ]; then
            kill $PORT_FORWARD_PID
            echo "kubectl port-forward stopped"
          else
            echo "kubectl port-forward process ID not found"
          fi

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-results
          path: zap-output/