# name: OWASP ZAP Security Scan

# on:
#     workflow_dispatch:  # Handmatig triggeren
#     push:
#       branches: [ main ]  # Of vervang 'main' door je default branch

# jobs:
#  zap-scan:
#    runs-on: self-hosted  # Gebruik je self-hosted runner
   
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
   
#    - name: Test URL connectivity
#      run: |
#        echo "Testing connection to target URL: http://localhost:8081"
#        if curl -s --head --fail http://localhost:8081 > /dev/null; then
#          echo "✅ Connection successful"
#        else
#          echo "❌ Connection failed - URL is not accessible"
#          echo "Make sure port-forwarding is running with: kubectl port-forward service/flask-app 8081:80"
#          exit 1
#        fi
   
#    - name: Run ZAP Scan
#      run: |
#        echo "Scanning target URL: http://host.docker.internal:8081"
#        mkdir -p zap-report
#        docker run --rm \
#          -v "$(pwd)/zap-report:/zap/wrk" \
#          zaproxy/zap-stable:latest \
#          zap-baseline.py -t http://host.docker.internal:8081 -g gen.conf -r zap-report.html
   
#    - name: Check ZAP result
#      run: |
#        if [ -f "zap-report/zap-report.html" ]; then
#          echo "✅ ZAP scan complete. Results saved to zap-report directory."
#          ls -la zap-report/
#        else
#          echo "❌ ZAP report not found. The scan might have failed."
#          exit 1
#        fi
   
#    - name: Upload ZAP report
#      if: always()  # Upload report even if previous steps failed
#      uses: actions/upload-artifact@v4
#      with:
#        name: zap-report
#        path: zap-report

name: OWASP ZAP Security Scan

on:
    workflow_dispatch:  # Handmatig triggeren
    push:
      branches: [ main ]  # Of vervang 'main' door je default branch
  
jobs:
  zap-scan:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test URL connectivity
      run: |
        echo "Testing connection to target URL: http://localhost:8081"
        if curl -s --head --fail http://localhost:8081 > /dev/null; then
          echo "✅ Connection successful"
        else
          echo "❌ Connection failed - Make sure port-forwarding is running"
          exit 1
        fi
    
    - name: Run ZAP Scan
      run: |
        echo "Scanning target URL: http://host.docker.internal:8081"
        mkdir -p zap-report
        docker run --rm \
          -v "$(pwd)/zap-report:/zap/wrk" \
          zaproxy/zap-stable:latest \
          zap-baseline.py -t http://host.docker.internal:8081 -g gen.conf -r zap-report.html -x zap-report.xml || true
    
    - name: Upload ZAP report
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: zap-report/
    
    - name: Upload to DefectDojo
      env:
        DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
        DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
      run: |
        SCAN_DATE=$(date +%Y-%m-%d)
        echo "⌛ Uploading ZAP Scan results to DefectDojo"
        
        # Controleer of het XML rapport bestaat
        if [ ! -f "zap-report/zap-report.xml" ]; then
          echo "❌ ZAP XML report not found!"
          exit 1
        fi
        
        # Upload naar DefectDojo met betere foutafhandeling
        HTTP_CODE=$(curl -s -o response.txt -w "%{http_code}" \
          -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -F "scan_date=$SCAN_DATE" \
          -F "scan_type=ZAP Scan" \
          -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
          -F "file=@zap-report/zap-report.xml")
        
        if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
          echo "✅ Successfully uploaded ZAP scan results"
        else
          echo "❌ Upload failed with HTTP code $HTTP_CODE"
          cat response.txt
          exit 1
        fi