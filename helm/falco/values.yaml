falco:
  customRules:
    custom-rules.yaml: |
      # ------------------
      # Macro definities
      # ------------------
      - macro: trusted_ip_addresses
        condition: (fd.sip in ("10.0.0.0/8", "192.168.0.0/16", "172.16.0.0/12"))

      - macro: whitelisted_container_images
        condition: (container.image.repository in ("devsecops1.azurecr.io/flask-app"))

      - macro: flask_allowed_processes
        condition: (proc.name in (python, flask, gunicorn, sh, bash, sqlite3))

      # ------------------
      # Custom Falco Rules - Grafana Optimized
      # ------------------

      - rule: Outbound connection to untrusted IP
        desc: Detect outbound connections to IP addresses not listed as trusted
        condition: >
          outbound and
          not trusted_ip_addresses and
          not fd.sip in ("127.0.0.1", "::1")
        output: "NETWORK ALERT: Untrusted outbound connection (severity=critical app=network user=%user.name container=%container.id destination=%fd.sip port=%fd.sport process=%proc.name)"
        priority: CRITICAL
        tags: [network, security, outbound, grafana_critical]

      - rule: Unauthorized shell in container
        desc: Detect unauthorized shell access in containers
        condition: >
          container and
          spawned_process and
          proc.name in (bash, sh, zsh) and
          not whitelisted_container_images
        output: "CONTAINER ALERT: Unauthorized shell access (severity=critical app=container user=%user.name container=%container.id image=%container.image.repository:%container.image.tag command=%proc.cmdline)"
        priority: CRITICAL
        tags: [container, security, shell, grafana_critical]

      - rule: Privilege escalation to root
        desc: Detect privilege escalation attempts to root user
        condition: >
          container and
          spawned_process and
          proc.euid=0 and
          proc.euid != user.uid
        output: "SECURITY ALERT: Privilege escalation detected (severity=critical app=security user=%user.name container=%container.id command=%proc.cmdline original_uid=%user.uid target_uid=%proc.euid)"
        priority: CRITICAL
        tags: [container, security, privilege-escalation, grafana_critical]

      - rule: Sensitive configuration file modification
        desc: Detect modification of sensitive configuration files
        condition: >
          open_write and
          fd.name pmatch "/app/config/*"
        output: "FILE ALERT: Sensitive config file modified (severity=high app=filesystem user=%user.name file=%fd.name command=%proc.cmdline container=%container.id)"
        priority: HIGH
        tags: [filesystem, security, config, grafana_high]

      # ------------------
      # Flask-specifieke rules - Grafana Enhanced
      # ------------------

      - rule: Flask App Unexpected Child Process
        desc: Detect unexpected process spawned by Flask application
        condition: >
          container and
          whitelisted_container_images and
          spawned_process and
          not flask_allowed_processes
        output: "FLASK ALERT: Unexpected process in Flask container (severity=warning app=flask user=%user.name command=%proc.cmdline container=%container.id parent=%proc.pname)"
        priority: WARNING
        tags: [flask, container, process, grafana_warning]

      - rule: Flask App File System Write outside allowed paths
        desc: Detect Flask app writing to unexpected locations
        condition: >
          container and
          whitelisted_container_images and
          open_write and
          not (fd.name pmatch "/tmp/*" or 
               fd.name pmatch "/var/log/*" or 
               fd.name pmatch "/app/*" or 
               fd.name pmatch "/app/data/*" or 
               fd.name endswith "database.db")
        output: "FLASK ALERT: Unexpected file write (severity=warning app=flask user=%user.name command=%proc.cmdline file=%fd.name container=%container.id)"
        priority: WARNING
        tags: [flask, filesystem, write, grafana_warning]

      - rule: Flask App Network Activity on Unexpected Ports
        desc: Detect Flask app network connections to unexpected ports
        condition: >
          container and
          whitelisted_container_images and
          (outbound or inbound) and
          not fd.lport in (5000, 80, 443) and
          not fd.sip in ("127.0.0.1", "::1")
        output: "FLASK ALERT: Unexpected network connection (severity=warning app=flask user=%user.name command=%proc.cmdline connection=%fd.lip:%fd.lport->%fd.rip:%fd.rport container=%container.id)"
        priority: WARNING
        tags: [flask, network, connection, grafana_warning]

      - rule: Flask App Shell Command Injection
        desc: Detect potential command injection in Flask application
        condition: >
          container and
          whitelisted_container_images and
          spawned_process and
          proc.name in (sh, bash) and
          proc.pname=python and
          not proc.cmdline startswith "sh -c /usr/local/bin/python"
        output: "FLASK SECURITY ALERT: Potential command injection (severity=high app=flask user=%user.name command=%proc.cmdline container=%container.id parent_command=%proc.pcmdline)"
        priority: HIGH
        tags: [flask, security, command-injection, grafana_high]
